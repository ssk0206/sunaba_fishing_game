# ---------------------------------
# 釣りゲーム
# ---------------------------------

memory[55001] -> 1

#
# 定数 先頭大文字
#
const WHITE -> 999999
const BLACK -> 000000
const GLAY -> 444444
const SILVER -> 888888
const GOLD -> 999900
const BROWN -> 992222
const MARINE_BLUE -> 004577
const RED -> 995555
const SKY_BLUE -> 668699
const SUN_RED -> 883300

const SCREEN -> 60000
const MAIN_TIME -> 1000
const MAIN_NUM -> 1100
const MAIN_POINT -> 1300
const PAUSE -> 1400
const ALPHABET -> 1500
const GAME -> 1999
const SPACE_KEY_FLAG -> 1998

const PLAYER_NUMBER -> 0
const FISHLINE_NUMBER -> 10
const FISH1 -> 20
const FISH2 -> 30
const FISH3 -> 40
const FISH4 -> 50

const FISH5 -> 70
const FISH6 -> 80

const FISH7 -> 90
const FISH8 -> 100

const LEVEL -> 190
const SHIP_LEVEL -> 191

const FISH_NUMBERS -> 200
const COLLITION_NUMBER -> 1050

# ---------------------------------
# ゲーム本体
# ---------------------------------

initialize_game()


while memory[GAME]
	if memory[PAUSE] = 1
		memory[55000] -> 1
		# 釣り糸を垂らし始めたら釣り針が下がる
		if Fishline_get_drop_flag(FISHLINE_NUMBER) = 1
			Fishline_drop(FISHLINE_NUMBER)

		# 釣り糸を垂らし始めたら船は動けない
		if Fishline_get_drop_flag(FISHLINE_NUMBER) = 0
			Player_move(PLAYER_NUMBER)

		Player_draw(PLAYER_NUMBER)

		Fish_move(FISH1)
		Fish_move(FISH2)
		Fish_move(FISH3)
		Fish_move(FISH4)

		if memory[LEVEL] >= 2
			Fish_move(FISH5)
			Fish_move(FISH6)

		if memory[LEVEL] >= 3
			Fish_move(FISH7)
			Fish_move(FISH8)

		# 左クリックで釣り糸フラグを立てる
		if left_click()
			Fishline_set_drop_flag(FISHLINE_NUMBER)

		Fishline_draw(FISHLINE_NUMBER)

		Timer_increment(MAIN_TIME)
		if enter_key()
			initialize_game()
	
		if space_key()
			memory[PAUSE] -> 0
		
		if up_key()
			memory[GAME] -> 0
		
		if space_key()
			create_pause(WHITE)
			# 一時停止
			pause()
		
		memory[FISH_NUMBERS] -> 0

	if memory[PAUSE] = 0
		memory[55000] -> 1
		if space_key()
			# 再開
			resume()
			#create_pause(MARINE_BLUE)
			clear_pause(MARINE_BLUE)
		
		if left_click() * (MAIN_POINT[NOW] >= (50 * memory[LEVEL])) * (15 <= mouse_x()) * (mouse_x() <= 85) * (40 <= mouse_y()) * (mouse_y() <= 50) * (memory[LEVEL] <= 2)
			Point_add(MAIN_POINT, -50 * memory[LEVEL])
			click(LEVEL)
			clear_pause(MARINE_BLUE)
			create_pause(WHITE)
			if memory[LEVEL] = 2
				Fish_new(FISH5)
				Fish_new(FISH6)
			if memory[LEVEL] = 3
				Fish_new(FISH7)
				Fish_new(FISH8)
			
		if left_click() * (MAIN_POINT[NOW] >= (50 * memory[SHIP_LEVEL])) * (15 <= mouse_x()) * (mouse_x() <= 85) * (50 <= mouse_y()) * (mouse_y() <= 60) * (memory[SHIP_LEVEL] <= 1)
			Point_add(MAIN_POINT, -50 * memory[SHIP_LEVEL])
			click(SHIP_LEVEL)
			clear_pause(MARINE_BLUE)
			create_pause(WHITE)
			if memory[SHIP_LEVEL] = 2
				FISHLINE_NUMBER[FISHLINE_VELOCITY] -> 60

# SCORE表示
create_sea()

Alphabet_create_word(ALPHABET, 3, 151805, 42, 50 ,WHITE)
Alphabet_create_word(ALPHABET, 2, 1903, 30, 50 ,WHITE)

Point_draw(MAIN_POINT, MAIN_POINT[0], 64, 50)
Number_draw(MAIN_NUM, 0, 64, 50, WHITE)

# ---------------------------------
# ゲーム画面
# ---------------------------------

#
# ゲーム初期化
#
def initialize_game()
	memory[GAME] -> 1
	memory[PAUSE] -> 1
	memory[LEVEL] -> 1
	memory[SHIP_LEVEL] -> 1
	create_sky()
	create_sun()
	create_sea()
	#プレイヤー生成
	Player_new(PLAYER_NUMBER)
	Fishline_new(FISHLINE_NUMBER)
	Timer_new(MAIN_TIME)
	Fish_new(FISH1)
	Fish_new(FISH2)
	Fish_new(FISH3)
	Fish_new(FISH4)
	Collision_new(COLLITION_NUMBER)
	Number_new(MAIN_NUM)
	Point_new(MAIN_POINT)
	Alphabet_new(ALPHABET)

#
# 一時停止
#
def pause()
	flag -> 1	
	while flag
		if space_key() = 0
			memory[PAUSE] -> 0
			flag -> 0

#
# 再開
#
def resume()
	flag -> 1	
	while flag
		if space_key() = 0
			memory[PAUSE] -> 1
			flag -> 0


#
# ポーズ画面作成
#
def create_pause(color)
	clear_pause(MARINE_BLUE)
	x -> 15
	y -> 40
	while y <= 60
		while x <= 85
			if ((x = 15) + (x = 85) + (y = 40) + (y = 60)) > 0
				point(x, y, color)
			if y = 50
				point(x, y, color)
			x -> x + 1
		y -> y + 1
		x -> 15

	# FISH
	Alphabet_create_word(ALPHABET, 4, 06091908, 34, 43, WHITE)
	# LV
	Alphabet_create_word(ALPHABET, 2, 1222, 48, 43, WHITE)
	Number_draw(MAIN_NUM, memory[LEVEL]*20, 55, 43, WHITE)

	if memory[LEVEL] = 1
		Number_draw(MAIN_NUM, memory[LEVEL]*20 *5, 70, 43, WHITE)
		Number_draw(MAIN_NUM, 0, 74, 43, WHITE)
		Alphabet_draw(ALPHABET, P, 80, 43, WHITE)
	if memory[LEVEL] = 2
		Number_draw(MAIN_NUM, memory[LEVEL]*20 *5 / 10, 66, 43, WHITE)
		Number_draw(MAIN_NUM, 0, 70, 43, WHITE)
		Number_draw(MAIN_NUM, 0, 74, 43, WHITE)
		Alphabet_draw(ALPHABET, P, 80, 43, WHITE)

	Alphabet_create_word(ALPHABET, 4, 19080916, 34, 53, WHITE)
	Alphabet_create_word(ALPHABET, 2, 1222, 48, 53, WHITE)
	Number_draw(MAIN_NUM, memory[SHIP_LEVEL]*20, 55, 53, WHITE)

	if memory[SHIP_LEVEL] = 1
		Number_draw(MAIN_NUM, memory[SHIP_LEVEL]*20 *5, 70, 53, WHITE)
		Number_draw(MAIN_NUM, 0, 74, 53, WHITE)
		Alphabet_draw(ALPHABET, P, 80, 53, WHITE)

#
# ポーズ画面リセット
#
def clear_pause(color)
	x -> 15
	y -> 40
	while y <= 60
		while x <= 85
			point(x, y, color)
			x -> x + 1
		y -> y + 1
		x -> 15

#
# 空を作成
#
def create_sky()
	x -> 0
	y -> 0
	while y < 26
		while x < 100
			point(x, y, SKY_BLUE)
			x -> x + 1
		y -> y + 1
		x -> 0

#
# 太陽を作成
#
def create_sun()
	x -> 5
	y -> 5
	while y < 8
		while x < 8
			point(x, y, SUN_RED)
			x -> x + 1
		y -> y + 1
		x -> 5

	point(3, 3, SUN_RED)
	point(6, 2, SUN_RED)
	point(6, 3, SUN_RED)
	point(9, 3, SUN_RED)

	point(9, 6, SUN_RED)
	point(10, 6, SUN_RED)
	point(9, 9, SUN_RED)

	point(6, 9, SUN_RED)
	point(6, 10, SUN_RED)

	point(2, 6, SUN_RED)
	point(3, 6, SUN_RED)
	point(3, 9, SUN_RED)


# 
# 海を作成
#
def create_sea()
	x -> 0
	y -> 26
	while y < 100
		while x < 100
			point(x, y, MARINE_BLUE)
			x -> x + 1
		y -> y + 1
		x -> 0

# ---------------------------------
# ライブラリ
# ---------------------------------

#
# クリック関数
#
def click(level)
	flag -> 1
	while flag
		if left_click() = 0
			memory[level] -> memory[level] + 1
			flag -> 0


#
# 点を描画
#
def point(x, y, color)
	if (0 <= x) * (x < 100) * (0 <= y) * (y < 100)
		SCREEN[x + (y * 100)] -> color

#
# マウスの X 座標
#
def mouse_x()
	out -> memory[50000]

#
# マウスの Y 座標
#
def mouse_y()
	out -> memory[50001]

#
# 左クリック
#
def left_click()
	out -> memory[50002]

#
# 上キー
#
def up_key()
	out -> memory[50004]

#
# スペースキー
#
def space_key()
	out -> memory[50008]

#
# エンターキー
#
def enter_key()
	out -> memory[50009]

#
# エンターキーで画面クリア
#
def clear_screen()
	x -> 0
	y -> 0
	while y < 100
		while x < 100
			point(x, y, BLACK)
			x -> x + 1
		y -> y + 1
		x -> 0



# 方向を決める
def sign(x)
	out -> 0
	if x < 0
		out -> -1
	if x > 0
		out -> 1


# 絶対値
def abs(x)
	if x < 0
		x -> -x
	out -> x

#
# 最大値
#
def max (i, j)
	a -> j
	if i > j
		a -> i
	if i <= j
		a -> j
	out -> a

#
# 最小値
#
def min (i, j)
	a -> i
	if j > i
		a -> i
	if j <= i
		a -> j
	out -> a

#
# あまり
#
def modulo(a, b)
   out -> (a - ((a / b) * b))

#
# 擬似乱数
#
def random(prev, num) #linear congruential generator mod 1048573
   if prev = 0 #0はマズい
      prev -> 1
   out -> modulo(2043 * prev, num)

# ---------------------------------
# Playerクラス
# ---------------------------------

const PLAYER_X -> 0
const PLAYER_Y -> 1
const PLAYER_VELOCITY -> 2

# インスタンス作成
def Player_new(this)
	this[PLAYER_X] -> 50
	this[PLAYER_Y] -> 24					#キャラクターの高さ
	this[PLAYER_VELOCITY] -> 1		#速度を設定

def Player_get_x(this)
	out -> this[PLAYER_X]

def Player_get_y(this)
	out -> this[PLAYER_Y]


# マウス方向に動く
def Player_move(this)
	if abs((this[PLAYER_X] - mouse_x())) > 1

		# 前の位置を消す
		point(this[PLAYER_X], this[PLAYER_Y]-1, SKY_BLUE)
		point(this[PLAYER_X]+1, this[PLAYER_Y]-2, SKY_BLUE)
		point(this[PLAYER_X]+2, this[PLAYER_Y]-3, SKY_BLUE)
		point(this[PLAYER_X]+3, this[PLAYER_Y]-4, SKY_BLUE)

		point(this[PLAYER_X]-3, this[PLAYER_Y]+1, SKY_BLUE)
		point(this[PLAYER_X]-2, this[PLAYER_Y]+1, SKY_BLUE)
		point(this[PLAYER_X]-1, this[PLAYER_Y]+1, SKY_BLUE)

		point(this[PLAYER_X]-4, this[PLAYER_Y], SKY_BLUE)
		point(this[PLAYER_X]-3, this[PLAYER_Y], SKY_BLUE)
		point(this[PLAYER_X]-2, this[PLAYER_Y], SKY_BLUE)
		point(this[PLAYER_X]-1, this[PLAYER_Y], SKY_BLUE)
		point(this[PLAYER_X], this[PLAYER_Y], SKY_BLUE)


		this[PLAYER_X] -> (this[PLAYER_X] + (sign(mouse_x() - this[PLAYER_X]) * this[PLAYER_VELOCITY]))
		
		#this[PLAYER_X] -> (this[PLAYER_X] + (1 * this[PLAYER_VELOCITY]))

def Player_draw(this)
	x -> min(max(this[PLAYER_X], 0), 96)
	y -> min(max(this[PLAYER_Y], 0), 99)

	point(x, this[PLAYER_Y]-1, BROWN)
	point(x+1, this[PLAYER_Y]-2, BROWN)
	point(x+2, this[PLAYER_Y]-3, BROWN)
	point(x+3, this[PLAYER_Y]-4, BROWN)

	point(x-3, this[PLAYER_Y]+1, WHITE)
	point(x-2, this[PLAYER_Y]+1, WHITE)
	point(x-1, this[PLAYER_Y]+1, WHITE)

	point(x-4, this[PLAYER_Y], WHITE)
	point(x-3, this[PLAYER_Y], WHITE)
	point(x-2, this[PLAYER_Y], WHITE)
	point(x-1, this[PLAYER_Y], WHITE)
	point(x, this[PLAYER_Y], WHITE)


# ---------------------------------
# Fishlineクラス
# ---------------------------------
const FISHLINE_X -> 0
const FISHLINE_Y -> 1
const FISHLINE_LENGTH -> 2
const FISHLINE_DROP_FLAG -> 3
const FISHLINE_BOTTOM_FLAG -> 4
const FISHLINE_VELOCITY -> 5
const FISHLINE_MOVE_FLAG -> 6

def Fishline_new(this)
	this[FISHLINE_X] -> Player_get_x(PLAYER_NUMBER) + 4
	this[FISHLINE_Y] -> Player_get_y(PLAYER_NUMBER) - 3
	this[FISHLINE_DROP_FLAG] -> 0
	this[FISHLINE_BOTTOM_FLAG] -> 0
	this[FISHLINE_VELOCITY] -> 30
	this[FISHLINE_MOVE_FLAG] -> 0

def Fishline_get_x(this)
	out -> this[FISHLINE_X]

def Fishline_get_y(this)
	out -> this[FISHLINE_Y]

def Fishline_hit_Fish(this)
	this[FISHLINE_BOTTOM_FLAG] -> 1

# このフレームに釣り針が動くかどうかのフラグ
def Fishline_move_flag(this)
	this[FISHLINE_MOVE_FLAG] -> 0
	if modulo(Timer_get_count(MAIN_TIME), (60 / this[FISHLINE_VELOCITY]) ) = 0
		this[FISHLINE_MOVE_FLAG] -> 1
	out -> this[FISHLINE_MOVE_FLAG]

def Fishline_drop(this)

	# 底に着いたらフラグを立てる
	if this[FISHLINE_Y] >= 96
		this[FISHLINE_BOTTOM_FLAG] -> 1

	# 海の底に着いたら釣り糸を引く
	if this[FISHLINE_BOTTOM_FLAG]

		# 空と海の色を分けて塗る
		if this[FISHLINE_Y] < 26
			point(this[FISHLINE_X], this[FISHLINE_Y], SKY_BLUE)
		if this[FISHLINE_Y] >= 26
			point(this[FISHLINE_X], this[FISHLINE_Y], MARINE_BLUE)

		# 釣り針が上がる
		if Fishline_move_flag(this)
			this[FISHLINE_Y] -> this[FISHLINE_Y] - 1

		# 釣り糸が元にもどったらまた船が動ける
		if this[FISHLINE_Y] = (Player_get_y(PLAYER_NUMBER) - 4)
			Fishline_clear_drop_flag(FISHLINE_NUMBER)
			this[FISHLINE_BOTTOM_FLAG] -> 0

	# 釣り糸を垂らし始めたとき釣り針が下がる
	if (this[FISHLINE_Y] < 96) * (this[FISHLINE_BOTTOM_FLAG] = 0) * Fishline_move_flag(this)
		this[FISHLINE_Y] -> this[FISHLINE_Y] + 1



# 釣り糸を垂らしているかどうか
def Fishline_get_drop_flag(this)
	out -> this[FISHLINE_DROP_FLAG]

# 釣り糸を垂らしている状態に(FLAGを1に)
def Fishline_set_drop_flag(this)
	this[FISHLINE_DROP_FLAG] -> 1

# 釣り糸を垂らしていない状態に(FLAGを1に)
def Fishline_clear_drop_flag(this)
	this[FISHLINE_DROP_FLAG] -> 0

def Fishline_draw(this)

	point(this[FISHLINE_X], this[FISHLINE_Y], SKY_BLUE)
	this[FISHLINE_X] -> Player_get_x(0) + 3
	x -> min(max(this[FISHLINE_X], 3), 99)

	y -> Player_get_y(PLAYER_NUMBER)-3
	while y <= Fishline_get_y(this)
		point(Fishline_get_x(this), y, WHITE)
		y -> y + 1
	point(Fishline_get_x(this), Fishline_get_y(this), GLAY)


# ---------------------------------
# Fishクラス
# ---------------------------------

const FISH_X -> 0
const FISH_Y -> 1
const FISH_VELOCITY -> 2
const DIRECTION -> 3
const CATCH_FLAG -> 4
const MOVE_FLAG -> 5
const CREATE_SEA_FLAG -> 6
const POINT -> 7
const LIFE -> 8
const FISH_LEVEL -> 9

def Fish_new(this)
	level -> 1
	this[FISH_LEVEL] -> 1
	if this >= 70
		level -> 3
		this[FISH_LEVEL] -> 2
		if this >= 90
			level -> 6
			this[FISH_LEVEL] -> 3

	this[FISH_X] -> 119
	this[FISH_Y] -> 70 - this + 7
	if this[FISH_LEVEL] = 2
		this[FISH_Y] -> this[FISH_Y] + 55

	if this[FISH_LEVEL] = 3
		this[FISH_Y] -> this[FISH_Y] + 90
	
	this[MOVE_FLAG] -> 0
	this[CATCH_FLAG] -> 0
	# 60の約数
	this[FISH_VELOCITY] -> abs(60 - this) # 魚の速度
	this[DIRECTION] -> -1
	if modulo(this, 2)
		this[DIRECTION] -> 1
	this[CREATE_SEA_FLAG] -> 1
	this[POINT] -> 10 * level

def Fish_get_x(this)
	out -> this[FISH_X]

def Fish_get_y(this)
	out -> this[FISH_Y]

def Fish_move(this)
	Collision_judge(COLLITION_NUMBER, FISHLINE_NUMBER, this)
	
	# もしフラグが立っていたら、キャッチされていなかったら魚が移動
	if Fish_move_flag(this) * (this[CATCH_FLAG] = 0)

		# 端っこに着いたら方向が反対に
		if (this[FISH_X] = -10) + (this[FISH_X] = 120)
			this[DIRECTION] -> -1 * this[DIRECTION]

		this[FISH_X] -> this[FISH_X] + this[DIRECTION]
	
		Fish_draw(this)

	# もしキャッチされていたら魚が上に上がる
	if this[CATCH_FLAG]
		Fish_up(this)

# このフレームに魚が動くかどうかのフラグ
def Fish_move_flag(this)
	this[MOVE_FLAG] -> 0
	if modulo(Timer_get_count(MAIN_TIME), (60 / this[FISH_VELOCITY]) ) = 0
		this[MOVE_FLAG] -> 1
	out -> this[MOVE_FLAG]

# 釣られたらCATCH_FLAGを立てる
def Fish_catch(this)
	this[CATCH_FLAG] -> 1

def Fish_up(this)
	#this[FISH_X] -> Fishline_get_x(FISHLINE_NUMBER)
	this[FISH_Y] -> Fishline_get_y(FISHLINE_NUMBER) - 2
	# もし水面まであがったら
	if this[FISH_Y] <= 26
		memory[FISH_NUMBERS] -> memory[FISH_NUMBERS] + 1
		Fish_change_point(this)

	if this[FISH_Y] > 25
		Fish_draw(this)

def Fish_change_point(this)
	Point_add(MAIN_POINT, this[POINT] * memory[FISH_NUMBERS])
	create_sea()
	Fish_new(this)


def Fish_draw(this)
	color -> RED
	if this[FISH_LEVEL] = 2
		color -> SILVER
	if this[FISH_LEVEL] = 3
		color -> GOLD
	point(this[FISH_X], this[FISH_Y], BLACK)
	x -> 0
	y -> 0
	while y < 6
		while x < 11
			point(this[FISH_X] + (this[DIRECTION] * -x), this[FISH_Y] + y, MARINE_BLUE)
			x -> x + 1
		y -> y + 1
		x -> 0

	x -> 0
	y -> 0
	while y < 5
		while x < 11
			point(this[FISH_X] + (this[DIRECTION] * -x), this[FISH_Y] + y, color)
			if ((y = 0) + (y = 4) + (x = 0) + (x = 10))
				point(this[FISH_X] + (this[DIRECTION] * -x), this[FISH_Y] + y, MARINE_BLUE)
			x -> x + 1
		y -> y + 1
		x -> 1

	point(this[FISH_X]                         , this[FISH_Y] +2, color)
	point(this[FISH_X] + (this[DIRECTION] * -4), this[FISH_Y]   , color)
	point(this[FISH_X] + (this[DIRECTION] * -4), this[FISH_Y] +4, color)
	point(this[FISH_X] 												 , this[FISH_Y] +1, MARINE_BLUE)
	point(this[FISH_X] 												 , this[FISH_Y] +3, MARINE_BLUE)
	point(this[FISH_X] + (this[DIRECTION] * -7), this[FISH_Y] +1, MARINE_BLUE)
	point(this[FISH_X] + (this[DIRECTION] * -7), this[FISH_Y] +3, MARINE_BLUE)
	point(this[FISH_X] + (this[DIRECTION] * -9), this[FISH_Y] +2, MARINE_BLUE)


# ---------------------------------
# 当たり判定クラス Collision
# ---------------------------------

const JUDGEMENT -> 0

def Collision_new(this)
	this[JUDGEMENT] -> 0

# もし当たり判定内に入っていたらフラグを立てる
def Collision_judge(this, fishline_number, fish_number)
	x -> Fishline_get_x(fishline_number)
	y -> Fishline_get_y(fishline_number)
	x2 -> Fish_get_x(fish_number)
	y2 -> Fish_get_y(fish_number)

	if fish_number[DIRECTION] = 1
		if (((x2-12) <= x) * (x < (x2+2)) * (y2 <= y) * (y < (y2 + 5)))
			Collition_hit(this, fish_number)
	if fish_number[DIRECTION] = -1
		if (((x2-2) <= x) * (x < (x2 + 10)) * (y2 <= y) * (y < (y2 + 5)))
			Collition_hit(this, fish_number)
# Fishクラスに釣られたことを教える
def Collition_hit(this, fish_number)
	# 海の描画クリア
	if fish_number[CREATE_SEA_FLAG]
		create_sea()
		fish_number[CREATE_SEA_FLAG] -> 0
	Fish_catch(fish_number)
	Fishline_hit_Fish(FISHLINE_NUMBER)



# ---------------------------------
# タイマークラス
# ---------------------------------

const COUNT -> 0
const SECOND -> 1
const CHANGE_FLAG -> 2

def Timer_new(this)
	this[COUNT] -> 0
	this[SECOND] -> 60
	this[CHANGE_FLAG] -> 0

def Timer_get_count(this)
	out -> this[COUNT]

def Timer_get_second(this)
	out -> this[SECOND]

def Timer_increment(this)
	this[CHANGE_FLAG] -> 0
	this[COUNT] -> this[COUNT] + 1
	ten -> this[SECOND] / 10
	second -> modulo(this[SECOND], 10)

	x -> 90
	y -> 0
	while y < 9
		while x < 100
			point(x, y, SKY_BLUE)
			x -> x + 1
		y -> y + 1
		x -> 90

	#60フレームごと
	if this[COUNT] = 60
		this[CHANGE_FLAG] -> 1
		this[SECOND] -> this[SECOND] - 1
		this[COUNT] -> 0
		if this[SECOND] = -1
			memory[GAME] -> 0


	Number_draw(MAIN_NUM, ten*20, 90, 2, WHITE)
	Number_draw(MAIN_NUM, second*20, 94, 2, WHITE)
	


def Timer_change_flag(this)
	out -> this[CHANGE_FLAG]

# ------------------------------------
# ナンバークラス Number
# ------------------------------------

const ZERO -> 0
const ONE -> 20
const TWO -> 40
const THREE -> 60
const FOUR-> 80
const FIVE -> 100
const SIX -> 120
const SEVEN -> 140
const EIGHT -> 160
const NINE-> 180

def Number_new(this)
	Number_create_zero(this, ZERO)
	Number_create_one(this, ONE)
	Number_create_two(this, TWO)
	Number_create_three(this, THREE)
	Number_create_four(this, FOUR)
	Number_create_five(this, FIVE)
	Number_create_six(this, SIX)
	Number_create_seven(this, SEVEN)
	Number_create_eight(this, EIGHT)
	Number_create_nine(this, NINE)

# 2 1
# 5 4 3
def Number_create_zero(this, num)
	num_1 -> 101111
	num_2 -> 111101101
	Number_create(this, num, num_1, num_2)

def Number_create_one(this, num)
	num_1 -> 011010
	num_2 -> 111010010
	Number_create(this, num, num_1, num_2)

def Number_create_two(this, num)
	num_1 -> 100111
	num_2 -> 111001111
	Number_create(this, num, num_1, num_2)

def Number_create_three(this, num)
	num_1 -> 100111
	num_2 -> 111100111
	Number_create(this, num, num_1, num_2)

def Number_create_four(this, num)
	num_1 -> 101101
	num_2 -> 100100111
	Number_create(this, num, num_1, num_2)

def Number_create_five(this, num)
	num_1 -> 001111
	num_2 -> 111100111
	Number_create(this, num, num_1, num_2)	

def Number_create_six(this, num)
	num_1 -> 001111
	num_2 -> 111101111
	Number_create(this, num, num_1, num_2)

def Number_create_seven(this, num)
	num_1 -> 101111
	num_2 -> 100100100
	Number_create(this, num, num_1, num_2)

def Number_create_eight(this, num)
	num_1 -> 101111
	num_2 -> 111101111
	Number_create(this, num, num_1, num_2)

def Number_create_nine(this, num)
	num_1 -> 101111
	num_2 -> 111100111
	Number_create(this, num, num_1, num_2)
		
def Number_create(this, num, num_1, num_2)
	i -> 0
	while i < 15
		if i < 6
			this[num + i] -> modulo(num_1, 10)
			num_1 -> (num_1 / 10)
		if i >= 6
			this[num + i] -> modulo(num_2, 10)
			num_2 -> (num_2 / 10)
		i -> i + 1

def Number_draw(this, num, left, top, color)
	i -> 0
	while i < 15
		if (this[i + num] = 1)
			y -> i / 3
			x -> modulo(i, 3)
			point(left+x, top+y, color)
		i -> i + 1




# ------------------------------------
# ポイントクラス Point
# ------------------------------------

const NOW -> 0
const ADD -> 1

def Point_new(this)
	this[NOW] -> 0
	Number_draw(MAIN_NUM, 0, 24, 2, WHITE)


# ポイントが入ったら描画して、add()を呼び出す
def Point_get(this)
	#Point_add(this)
	#Point_draw(this, 20)
	

def Point_add(this, point)
	this[NOW] -> this[NOW] + point
	Point_now(this)

def Point_now(this)
	h -> 2
	w -> 13
	while h < 8
		while w < 24
			point(w, h, SKY_BLUE)
			w -> w + 1	
		h -> h + 1
		w -> 13
	Point_draw(this, this[NOW], 24, 2)

#
# ポイントを描画
# (インスタンス、何ポイント、X座標、Y座標)
def Point_draw(this, point, x, y)

	# 桁数
	original_x -> x
	num -> 0
	digits -> 0
	i -> 0

	# ポイントが10で割り切れたら続ける
	while (point / 10) > 0
		x -> x - 4
		point -> point / 10
		num -> modulo(point, 10)
		Number_draw(MAIN_NUM, num*20, x, y, WHITE)	
	x -> original_x

# ------------------------------------
# アルファベットクラス Alphabet
# ------------------------------------
const A -> 1
const B -> 2
const C -> 3
const D -> 4
const E -> 5
const F -> 6
const G -> 7
const H -> 8
const I -> 9
const J -> 10
const K -> 11
const L -> 12
const M -> 13
const N -> 14
const O -> 15
const P -> 16
const Q -> 17
const R -> 18
const S -> 19
const T -> 20
const U -> 21
const V -> 22
const W -> 23
const X -> 24
const Y -> 25
const Z -> 26

def Alphabet_new(this)
	a(this, A)
	b(this, B)
	c(this, C)
	d(this, D)
	e(this, E)
	f(this, F)
	g(this, G)
	h(this, H)
	i(this, I)
	j(this, J)
	k(this, K)
	l(this, L)
	m(this, M)
	n(this, N)
	o(this, O)
	p(this, P)
	q(this, Q)
	r(this, R)
	s(this, S)
	t(this, T)
	u(this, U)
	v(this, V)
	w(this, W)
	x(this, X)
	y(this, Y)
	z(this, Z)


def a(this, alphabet)
	num_1 -> 101010
	num_2 -> 101101111
	Alphabet_create(this, alphabet, num_1, num_2)

def b(this, alphabet)
	num_1 -> 101011
	num_2 -> 011101011
	Alphabet_create(this, alphabet, num_1, num_2)

def c(this, alphabet)
	num_1 -> 101010
	num_2 -> 010101001
	Alphabet_create(this, alphabet, num_1, num_2)

def d(this, alphabet)
	num_1 -> 101011
	num_2 -> 011101101
	Alphabet_create(this, alphabet, num_1, num_2)

def e(this, alphabet)
	num_1 -> 001111
	num_2 -> 111001111
	Alphabet_create(this, alphabet, num_1, num_2)

def f(this, alphabet)
	num_1 -> 001111
	num_2 -> 001001111
	Alphabet_create(this, alphabet, num_1, num_2)

def g(this, alphabet)
	num_1 -> 001110
	num_2 -> 110101111
	Alphabet_create(this, alphabet, num_1, num_2)

def h(this, alphabet)
	num_1 -> 101101
	num_2 -> 101101111
	Alphabet_create(this, alphabet, num_1, num_2)

def i(this, alphabet)
	num_1 -> 010111
	num_2 -> 111010010
	Alphabet_create(this, alphabet, num_1, num_2)

def j(this, alphabet)
	num_1 -> 100100
	num_2 -> 010101100
	Alphabet_create(this, alphabet, num_1, num_2)

def k(this, alphabet)
	num_1 -> 101101
	num_2 -> 101101011
	Alphabet_create(this, alphabet, num_1, num_2)

def l(this, alphabet)
	num_1 -> 001001
	num_2 -> 111001001
	Alphabet_create(this, alphabet, num_1, num_2)

def m(this, alphabet)
	num_1 -> 111101
	num_2 -> 101101111
	Alphabet_create(this, alphabet, num_1, num_2)

def n(this, alphabet)
	num_1 -> 101011
	num_2 -> 101101101
	Alphabet_create(this, alphabet, num_1, num_2)

def o(this, alphabet)
	num_1 -> 101010
	num_2 -> 010101101
	Alphabet_create(this, alphabet, num_1, num_2)

def p(this, alphabet)
	num_1 -> 101011
	num_2 -> 001001011
	Alphabet_create(this, alphabet, num_1, num_2)

def q(this, alphabet)
	num_1 -> 101010
	num_2 -> 110010101
	Alphabet_create(this, alphabet, num_1, num_2)

def r(this, alphabet)
	num_1 -> 101011
	num_2 -> 101101011
	Alphabet_create(this, alphabet, num_1, num_2)

def s(this, alphabet)
	num_1 -> 001110
	num_2 -> 011100010
	Alphabet_create(this, alphabet, num_1, num_2)

def t(this, alphabet)
	num_1 -> 010111
	num_2 -> 010010010
	Alphabet_create(this, alphabet, num_1, num_2)

def u(this, alphabet)
	num_1 -> 101101
	num_2 -> 111101101
	Alphabet_create(this, alphabet, num_1, num_2)

# 小文字
def v(this, alphabet)
	num_1 -> 000000
	num_2 -> 010101101
	Alphabet_create(this, alphabet, num_1, num_2)

def w(this, alphabet)
	num_1 -> 101101
	num_2 -> 101111111
	Alphabet_create(this, alphabet, num_1, num_2)

def x(this, alphabet)
	num_1 -> 101101
	num_2 -> 101101010
	Alphabet_create(this, alphabet, num_1, num_2)

def y(this, alphabet)
	num_1 -> 101101
	num_2 -> 010010010
	Alphabet_create(this, alphabet, num_1, num_2)

def z(this, alphabet)
	num_1 -> 100111
	num_2 -> 111001010
	Alphabet_create(this, alphabet, num_1, num_2)

#
# アルファベット作成
#
def Alphabet_create(this, alphabet, num_1, num_2)
	alphabet -> alphabet * 20
	i -> 0
	while i < 15
		if i < 6
			this[alphabet + i] -> modulo(num_1, 10)
			num_1 -> (num_1 / 10)
		if i >= 6
			this[alphabet + i] -> modulo(num_2, 10)
			num_2 -> (num_2 / 10)
		i -> i + 1

#
# 単語作成
#
def Alphabet_create_word(this, numbers, word, left, top, color)
	while numbers > 0
		Alphabet_draw(this, modulo(word, 100), left, top, color)
		word -> word / 100
		left -> left - 4
		numbers -> numbers - 1

#
# アルファベット描画
#
def Alphabet_draw(this, alphabet, left, top, color)
	i -> 0
	while i < 15
		if (this[i + (alphabet * 20)] = 1)
			y -> i / 3
			x -> modulo(i, 3)
			point(left+x, top+y, color)
		i -> i + 1